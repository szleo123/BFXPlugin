// MEL GUI for the BFX Maya plug-in

// Add BFX menu item to Maya menu bar
global proc createMenu()
{	
	global string $gMainWindow;
	
	// check if the menu already exists.
	// 	BFXMenu is a menu object
	if(`menu -ex BFXMenu`)
	{
		deleteUI BFXMenu;
	}
	
	setParent $gMainWindow;
	menu -l "BFX" BFXMenu;
		menuItem -l "Mesh Preparation" -c displayConfig;
		menuItem -l "Brittle Fracture" -c createCompoundNode;
}

global proc deleteMenu()
{
	if(`menu -ex BFXMenu`)
	{
		deleteUI BFXMenu;
	}
}

global proc deleteChildrenOfSelected() 
{
    // Get the list of currently selected objects
    string $selectedObjects[] = `ls -sl`;
    string $object = $selectedObjects[0]; 
    // List all children of the current object
    string $children[] = `listRelatives -c $object`;
    for ($i = 1; $i < size($children); $i++){
        delete $children[$i];
    }
    select -cl; 
}

// Create cmd configuration dialog window
global proc displayConfig()
{
	global string $numIter;
	global string $patternType = "patternType";
	global string $fractureDensity;
	global string $explodeAmt;
	//string $sphere[] = `sphere`;

	if(`window -ex BFXWindow`)
	{
		deleteUI BFXWindow;
	}

	window -title "Brittle Fracture Simulation Options" -wh 500 500 BFXWindow;

	// Node placement
	// collapsable parameters
	frameLayout -collapsable true -label "Node Placement";
		columnLayout -adjustableColumn true;
		rowLayout -numberOfColumns 3 -ad3 1; 
		intSliderGrp -l "Num of Nodes" -f true -fmn 0 -fmx 50 -min 1 -max 20 -v 10 "numSlider";
		button -l "Place Nodes" -c "int $num = `intSliderGrp -q -v numSlider`; NodeCmd -number $num;";
		button -l "Delete Nodes" -c deleteChildrenOfSelected;
		setParent ..;
		
		//string $NodePlacecmd = "int $val = `intSliderGrp -q -v " + $numIter + "`; NodeCmd -number $val;";
		//string $nodeplacerBtn = `button -l "Place Nodes" -c $NodePlacecmd"`; 

		text -l "Voronoi Container Size:" -fn boldLabelFont;
		//attrFieldGrp -attribute ($sphere[0] + ".translate") -label "Min Sites";
		//attrFieldGrp -attribute ($sphere[0] + ".scale") -label "Max Sites";
		
		string $formGrammar = `formLayout`;
		string $title = `text -l "CoACD" -fn boldLabelFont`;
		string $browseBtn = `button -l "Pre-process" -c runCoACD`;

		formLayout -e
			-attachForm $title "left" 100
			-attachForm $browseBtn "right" 100
			$formGrammar;
		setParent ..;

	setParent ..;

	// Fracture pattern
	// collapsable parameters
	frameLayout -collapsable true -label "Fracture Configuration";
		columnLayout -adjustableColumn true;

		// create the first radio collection
 		$radio1 = `radioCollection`;

 		// add some radio buttons to the collection
 		$full = `radioButton -label "Full-body"`;
 		$partial = `radioButton -label "Partial"`;
		// edit the radio collections to set the required radio button
 		radioCollection -edit -select $full $radio1;

		optionMenu -label "Fracture Pattern" -w 100 $patternType; // -changeCommand "print #1" // this will print out the curr selection @ dropdown.onChange()
            menuItem -label "Uniform";
            menuItem -label "Cluster";
            menuItem -label "Radial";
			menuItem -label "Plannar";
			menuItem -label "Slice";
			menuItem -label "Brick";
			menuItem -label "Custom";
		string $formGrammar2 = `formLayout`;
		string $title2 = `text -l "Custom Fracture Pattern" -fn boldLabelFont`;
		string $browseBtn2 = `button -l "Browse File" -c openFileBrowser`;

		formLayout -e -en false
			-attachForm $title2 "left" 100
			-attachForm $browseBtn2 "right" 100
			$formGrammar2;
		setParent ..;

		$explodeAmt = `floatSliderGrp -l "Explode Amount" -f true -fmn 0 -fmx 5 -min 0 -max 1 -v 0.5`;
		$fractureDensity = `floatSliderGrp -l "Fracture Density" -f true -fmn 0 -fmx 5 -min 0 -max 5 -v 1`;
	setParent ..;

	// Partial Fracturing
	// collapsable parameters
	frameLayout -collapsable true -label "Partial Fracturing";
		columnLayout -adjustableColumn true;

		text -l "Impact Sphere:" -fn boldLabelFont;
		//attrFieldGrp -attribute ($sphere[0] + ".translate") -label "Position" -en false;
		//attrFieldGrp -attribute ($sphere[0] + ".scale") -label "Scale" -en false;
	setParent ..;

	// dialog buttons
	string $formParams = `formLayout`;
	string $createBtn = `button -l "Create" -w 50 -c callFractureCmd`;
	string $cancelBtn = `button -l "Cancel" -w 50 -c quitConfig`;

	formLayout -e
		-attachPosition $createBtn "left" 0 75
		-attachPosition $cancelBtn "right" 0 100
		$formParams;

	showWindow;
}

global proc runCoACD()
{
	// currently assuming all the assets and coacd.exe are in the same dir as .mll
	string $pluginName = "BFXPlugin";
	string $fullpath = `pluginInfo -q -path -name $pluginName`;
	string $wk = substituteAllString($fullpath, $pluginName + ".mll", "");

	string $coacdPath = $wk + "coacd.exe";
	string $inputPath = $wk + "input.obj";
	string $outputPath = $wk + "output.obj";
	string $remeshPath = $wk + "remesh.obj";
	print($coacdPath + " -i " + $inputPath + " -o " + $outputPath + " -ro " + $remeshPath + "\n");

	system("\"" + $coacdPath + " -i " + $inputPath + " -o " + $outputPath + " -ro " + $remeshPath + "\"");
}

// call FractureCmd with args from config window
global proc callFractureCmd()
{
	global string $patternType;
	
	string $currPatternType = `optionMenu -q -v $patternType`;
	print ("pattern: " + $currPatternType + "\n");

	FractureCmd -p $patternType;
}

// Close command window
global proc quitConfig()
{
	if(`window -ex BFXWindow`)
	{
		deleteUI BFXWindow;
	}
}

global proc createCompoundNode()
{
	// set original mesh invisible
	select -allDagObjects -visible;
	toggleVisibilityAndKeepSelection `optionVar -query toggleVisibilityAndKeepSelectionBehaviour`;

	createNode transform -n Compound1;
	createNode mesh -n CompoundShape1 -p Compound1;
	sets -add initialShadingGroup CompoundShape1;
	createNode CompoundNode -n CompoundNode1;
	//connectAttr time1.outTime LSystemNode1.time;
	connectAttr CompoundNode1.outMesh CompoundShape1.inMesh;
	polySeparate -ch 1 CompoundShape1;

	// add active rigid bodies to the shards
	select -r Compound1;
	string $shapes[] = `listRelatives -c`;

	// create a gravity field with default settings
	gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 ;
	
	// Note: the last element of the Compound is a transform so we don't add rigid body to that.
	for ($i=0; $i<size($shapes)-1; ++$i)
	{
		select -r $shapes[$i];
		rigidBody -active -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;
		connectDynamic -f gravityField1 $shapes[$i];

		// reset face normals for a smooth appearance
		expandPolyGroupSelection;polySetToFaceNormal ; 
	};

	// Optional:
	// Create a ground plane for collision
	polyPlane -w 50 -h 50 -sx 10 -sy 10 -ax 0 1 0 -cuv 2 -ch 1;
	move -r 0 -3 0; // translate along y-axis
	
	// Add passive rigid body to it
	rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;
	
	// Begin playback from min to max timeframe
	// play -forward true;
}

createMenu();